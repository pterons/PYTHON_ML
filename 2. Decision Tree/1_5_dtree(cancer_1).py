# -*- coding: utf-8 -*-
"""1-5.DTree(cancer_1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ddsmc1ttdr53AMo2HwsqexNzm_yLcmkR
"""

# Decision Tree로 cancer 데이터를 학습한다.
# ----------------------------------------
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import numpy as np

# breast cancer 데이터를 가져온다.
cancer = load_breast_cancer()

# without feature nomalization

# Train 데이터 세트와 Test 데이터 세트를 구성한다
trainX, testX, trainY, testY = train_test_split(cancer['data'], cancer['target'], test_size = 0.2)

# Train 데이터를 학습한다.
dt = DecisionTreeClassifier(criterion='gini', max_depth = 15)
dt.fit(trainX, trainY)

# 시험 데이터로 정확도를 측정한다.
acc = dt.score(testX, testY)
print('정확도 =', np.round(acc, 4))

# with feature nomalization
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
z_data = scaler.fit_transform(cancer['data'])

# Train 데이터 세트와 Test 데이터 세트를 구성한다
trainX, testX, trainY, testY = train_test_split(z_data, cancer['target'], test_size = 0.2)

# Train 데이터를 학습한다.
dt = DecisionTreeClassifier(criterion='gini', max_depth = 15)
dt.fit(trainX, trainY)

# 시험 데이터로 정확도를 측정한다.
acc = dt.score(testX, testY)
print('정확도 =', np.round(acc, 4))

# feature별 중요도를 파악한다.
feat_impo = dt.feature_importances_
feat_name = list(cancer['feature_names'])

plt.figure(figsize=(12, 8))
x_idx = np.arange(len(feat_name))
plt.barh(x_idx, feat_impo, align = 'center')
plt.yticks(x_idx, feat_name)
plt.xlabel('feature importance')
plt.ylabel('feature')
plt.show()

# 중요도가 높은 feature 5개를 확인한다.
idx = np.argsort(feat_impo)[::-1][:5]
cancer['feature_names'][idx]

