# -*- coding: utf-8 -*-
"""3-1.KNN(iris_score).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PwB2cMJITR3MnlR9OMdPC1m0d7oSJP8O
"""

# KNN으로 iris 데이터를 학습한다.
# -----------------------------
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score

# 학습 데이터를 읽어온다.
iris = load_iris()

# Train 데이터 세트와 Test 데이터 세트를 구성한다
trainX, testX, trainY, testY = train_test_split(iris['data'], iris['target'], test_size = 0.2)

# KNN 으로 Train 데이터 세트를 학습한다.
knn = KNeighborsClassifier(n_neighbors=5, p=2, metric='minkowski')
knn.fit(trainX, trainY)

# Test 세트의 Feature에 대한 class를 추정하고, 정확도를 계산한다
predY = knn.predict(testX)
print(classification_report(testY, predY, target_names=iris.target_names))

print(' Accuracy = %.3f' % accuracy_score(testY, predY))
print('   Recall = %.3f' % recall_score(testY, predY, average='macro'))
print('Precision = %.3f' % precision_score(testY, predY, average='macro'))
print(' F1-score = %.3f' % f1_score(testY, predY, average='macro'))

# weighted average 계산. macr는 unweighted average임.
# support / len(testY)의 가중 평균
recall = 1 * 11/30 + 0.88 * 8 / 30 + 0.91 * 11 / 30
print(recall)

